# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_color_patches', [dirname(__file__)])
        except ImportError:
            import _color_patches
            return _color_patches
        if fp is not None:
            try:
                _mod = imp.load_module('_color_patches', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _color_patches = swig_import_helper()
    del swig_import_helper
else:
    import _color_patches
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class UnionFind(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnionFind, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnionFind, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _color_patches.UnionFind_next_set
    __swig_getmethods__["next"] = _color_patches.UnionFind_next_get
    if _newclass:
        next = _swig_property(_color_patches.UnionFind_next_get, _color_patches.UnionFind_next_set)
    __swig_setmethods__["size"] = _color_patches.UnionFind_size_set
    __swig_getmethods__["size"] = _color_patches.UnionFind_size_get
    if _newclass:
        size = _swig_property(_color_patches.UnionFind_size_get, _color_patches.UnionFind_size_set)

    def __init__(self):
        this = _color_patches.new_UnionFind()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _color_patches.delete_UnionFind
    __del__ = lambda self: None
UnionFind_swigregister = _color_patches.UnionFind_swigregister
UnionFind_swigregister(UnionFind)


def init(rem, nb_elts):
    return _color_patches.init(rem, nb_elts)
init = _color_patches.init

def join(rem, x, y):
    return _color_patches.join(rem, x, y)
join = _color_patches.join

def nb_ccs(rem):
    return _color_patches.nb_ccs(rem)
nb_ccs = _color_patches.nb_ccs

def del_uf(rem):
    return _color_patches.del_uf(rem)
del_uf = _color_patches.del_uf

def nb_color_patches(height):
    return _color_patches.nb_color_patches(height)
nb_color_patches = _color_patches.nb_color_patches
# This file is compatible with both classic and new-style classes.


